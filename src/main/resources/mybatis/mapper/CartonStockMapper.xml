<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.carton.mapper.CartonStockMapper" >
  <resultMap id="BaseResultMap" type="com.carton.model.CartonStock" >

    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="carton_category_id" property="cartonCategoryId" jdbcType="INTEGER" />
    <result column="stock" property="stock" jdbcType="INTEGER" />
    <result column="stock_left" property="stockLeft" jdbcType="INTEGER" />
    <result column="cost_price" property="costPrice" jdbcType="DOUBLE" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="create_user" property="createUser" jdbcType="VARCHAR" />
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
    <result column="update_user" property="updateUser" jdbcType="VARCHAR" />
    <result column="valid" property="valid" jdbcType="INTEGER" />

    <!--<association property="cartonCategory" javaType="com.carton.model.CartonCategory">
      <id column="carton_category_id" property="id" jdbcType="INTEGER" />
      <result column="carton_big_type" property="cartonBigType" jdbcType="VARCHAR" />
      <result column="cartonBigValue" property="cartonBigValue" jdbcType="VARCHAR" />
      <result column="carton_small_type" property="cartonSmallType" jdbcType="VARCHAR" />
      <result column="cartonSmallValue" property="cartonSmallValue" jdbcType="VARCHAR" />
      <result column="carton_standard" property="cartonStandard" jdbcType="VARCHAR" />
      <result column="critical_standard" property="criticalStandard" jdbcType="VARCHAR" />
    </association>-->

  </resultMap>
  <sql id="Example_Where_Clause" >

    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >

    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    
    id, name, carton_category_id, stock, stock_left, cost_price, create_date, create_user, 
    update_date, update_user, valid
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.carton.model.CartonStockExample" >

    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from carton_stock
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >

    select
    <include refid="Base_Column_List" />
    from carton_stock
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    
    delete from carton_stock
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.carton.model.CartonStockExample" >

    delete from carton_stock
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.carton.model.CartonStock" >
    
    insert into carton_stock (id, name, carton_category_id, 
      stock, stock_left, cost_price, 
      create_date, create_user, update_date, 
      update_user, valid)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{cartonCategoryId,jdbcType=VARCHAR}, 
      #{stock,jdbcType=INTEGER}, #{stockLeft,jdbcType=INTEGER}, #{costPrice,jdbcType=DOUBLE}, 
      #{createDate,jdbcType=TIMESTAMP}, #{createUser,jdbcType=VARCHAR}, #{updateDate,jdbcType=TIMESTAMP}, 
      #{updateUser,jdbcType=VARCHAR}, #{valid,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.carton.model.CartonStock" >

    insert into carton_stock
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="cartonCategoryId != null" >
        carton_category_id,
      </if>
      <if test="stock != null" >
        stock,
      </if>
      <if test="stockLeft != null" >
        stock_left,
      </if>
      <if test="costPrice != null" >
        cost_price,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="createUser != null" >
        create_user,
      </if>
      <if test="updateDate != null" >
        update_date,
      </if>
      <if test="updateUser != null" >
        update_user,
      </if>
      <if test="valid != null" >
        valid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="cartonCategoryId != null" >
        #{cartonCategoryId,jdbcType=VARCHAR},
      </if>
      <if test="stock != null" >
        #{stock,jdbcType=INTEGER},
      </if>
      <if test="stockLeft != null" >
        #{stockLeft,jdbcType=INTEGER},
      </if>
      <if test="costPrice != null" >
        #{costPrice,jdbcType=DOUBLE},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="updateDate != null" >
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="valid != null" >
        #{valid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.carton.model.CartonStockExample" resultType="java.lang.Integer" >

    select count(*) from carton_stock
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >

    update carton_stock
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.cartonCategoryId != null" >
        carton_category_id = #{record.cartonCategoryId,jdbcType=VARCHAR},
      </if>
      <if test="record.stock != null" >
        stock = #{record.stock,jdbcType=INTEGER},
      </if>
      <if test="record.stockLeft != null" >
        stock_left = #{record.stockLeft,jdbcType=INTEGER},
      </if>
      <if test="record.costPrice != null" >
        cost_price = #{record.costPrice,jdbcType=DOUBLE},
      </if>
      <if test="record.createDate != null" >
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUser != null" >
        create_user = #{record.createUser,jdbcType=VARCHAR},
      </if>
      <if test="record.updateDate != null" >
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateUser != null" >
        update_user = #{record.updateUser,jdbcType=VARCHAR},
      </if>
      <if test="record.valid != null" >
        valid = #{record.valid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >

    update carton_stock
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      carton_category_id = #{record.cartonCategoryId,jdbcType=VARCHAR},
      stock = #{record.stock,jdbcType=INTEGER},
      stock_left = #{record.stockLeft,jdbcType=INTEGER},
      cost_price = #{record.costPrice,jdbcType=DOUBLE},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      create_user = #{record.createUser,jdbcType=VARCHAR},
      update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      update_user = #{record.updateUser,jdbcType=VARCHAR},
      valid = #{record.valid,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.carton.model.CartonStock" >

    update carton_stock
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="cartonCategoryId != null" >
        carton_category_id = #{cartonCategoryId,jdbcType=VARCHAR},
      </if>
      <if test="stock != null" >
        stock = #{stock,jdbcType=INTEGER},
      </if>
      <if test="stockLeft != null" >
        stock_left = #{stockLeft,jdbcType=INTEGER},
      </if>
      <if test="costPrice != null" >
        cost_price = #{costPrice,jdbcType=DOUBLE},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="updateDate != null" >
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="valid != null" >
        valid = #{valid,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.carton.model.CartonStock" >
    
    update carton_stock
    set name = #{name,jdbcType=VARCHAR},
      carton_category_id = #{cartonCategoryId,jdbcType=VARCHAR},
      stock = #{stock,jdbcType=INTEGER},
      stock_left = #{stockLeft,jdbcType=INTEGER},
      cost_price = #{costPrice,jdbcType=DOUBLE},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=VARCHAR},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=VARCHAR},
      valid = #{valid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>